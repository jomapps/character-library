/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    characters: Character;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    characters: CharactersSelect<false> | CharactersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  /**
   * The unique asset ID from the DINOv3 service (R2 object key).
   */
  dinoAssetId?: string | null;
  /**
   * The public URL for the media asset from DINOv3 service.
   */
  dinoMediaUrl?: string | null;
  dinoProcessingStatus?: ('pending' | 'processing' | 'validation_failed' | 'validation_success' | 'error') | null;
  /**
   * 384-dimensional feature vector from DINOv3 model.
   */
  dinoFeatures?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Image quality score (0-100) from DINOv3 analysis.
   */
  qualityScore?: number | null;
  /**
   * Character consistency score (0-100) when compared to reference.
   */
  consistencyScore?: number | null;
  /**
   * Detailed notes from DINOv3 validation process, including failure reasons.
   */
  validationNotes?: string | null;
  /**
   * Timestamp when DINOv3 processing was completed.
   */
  dinoProcessedAt?: string | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "characters".
 */
export interface Character {
  id: string;
  /**
   * The primary name of the character.
   */
  name: string;
  status?: ('draft' | 'in_development' | 'ready' | 'in_production' | 'archived') | null;
  /**
   * Unique identifier for this character (auto-generated if not provided).
   */
  characterId?: string | null;
  /**
   * Detailed background story and history of the character.
   */
  biography?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Character personality, behavioral traits, and psychological profile.
   */
  personality?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * What drives this character, their goals and desires.
   */
  motivations?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Key relationships with other characters and entities.
   */
  relationships?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Origin story and formative experiences.
   */
  backstory?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  skills?:
    | {
        skill: string;
        level?: ('beginner' | 'intermediate' | 'advanced' | 'expert' | 'master') | null;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  age?: number | null;
  height?: string | null;
  weight?: string | null;
  eyeColor?: string | null;
  hairColor?: string | null;
  /**
   * Detailed physical appearance, distinguishing features, and overall look.
   */
  physicalDescription?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Voice characteristics, accent, speech patterns, and mannerisms.
   */
  voiceDescription?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Typical clothing style, fashion preferences, and signature looks.
   */
  clothing?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Integration settings and sync status with Novel Movie projects.
   */
  novelMovieIntegration?: {
    /**
     * The Novel Movie project ID this character belongs to.
     */
    projectId?: string | null;
    /**
     * The name of the Novel Movie project.
     */
    projectName?: string | null;
    /**
     * Timestamp of the last successful sync with Novel Movie.
     */
    lastSyncAt?: string | null;
    /**
     * Current synchronization status with Novel Movie.
     */
    syncStatus?: ('synced' | 'pending' | 'conflict' | 'error') | null;
    /**
     * How to handle sync conflicts between systems.
     */
    conflictResolution?: ('manual' | 'auto') | null;
    /**
     * History of changes and sync operations.
     */
    changeLog?:
      | {
          timestamp: string;
          source: 'novel-movie' | 'character-library';
          changes?:
            | {
                field: string;
                id?: string | null;
              }[]
            | null;
          /**
           * User or system that resolved conflicts.
           */
          resolvedBy?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Detailed character relationships with other characters in the project.
   */
  enhancedRelationships?:
    | {
        /**
         * ID of the related character.
         */
        characterId: string;
        /**
         * Name of the related character for reference.
         */
        characterName?: string | null;
        /**
         * Type of relationship (e.g., friend, enemy, family, mentor).
         */
        relationshipType: string;
        /**
         * Description of how these characters interact.
         */
        relationshipDynamic?: string | null;
        /**
         * How this relationship affects the story.
         */
        storyContext?: string | null;
        /**
         * Visual elements that represent this relationship.
         */
        visualCues?:
          | {
              cue: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Strength of the relationship (1-10).
         */
        strength?: number | null;
        /**
         * Level of conflict in the relationship (1-10).
         */
        conflictLevel?: number | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Track character appearances in different scenes.
   */
  sceneContexts?:
    | {
        sceneId: string;
        sceneType?: ('dialogue' | 'action' | 'emotional' | 'establishing') | null;
        generatedImages?:
          | {
              imageId: string;
              id?: string | null;
            }[]
          | null;
        qualityScores?:
          | {
              score?: number | null;
              id?: string | null;
            }[]
          | null;
        lastGenerated?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * The single "genesis" image that defines the character. All consistency is measured against this.
   */
  masterReferenceImage?: (string | null) | Media;
  /**
   * Indicates if the master reference image has been processed by DINOv3.
   */
  masterReferenceProcessed?: boolean | null;
  /**
   * Quality score of the master reference image (0-100).
   */
  masterReferenceQuality?: number | null;
  /**
   * Indicates if the 360° core reference set has been generated.
   */
  coreSetGenerated?: boolean | null;
  /**
   * Timestamp when the 360° core set was generated.
   */
  coreSetGeneratedAt?: string | null;
  /**
   * Quality metrics for the generated 360° core set.
   */
  coreSetQuality?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Comprehensive quality metrics for Novel Movie integration.
   */
  enhancedQualityMetrics?: {
    /**
     * Consistency with story narrative (0-100).
     */
    narrativeConsistency?: number | null;
    /**
     * Visual consistency across different scenes (0-100).
     */
    crossSceneConsistency?: number | null;
    /**
     * Visual consistency in relationship interactions (0-100).
     */
    relationshipVisualConsistency?: number | null;
    /**
     * Timestamp of last quality validation.
     */
    lastValidated?: string | null;
    /**
     * History of quality validation runs.
     */
    validationHistory?:
      | {
          timestamp: string;
          validationType?: ('visual' | 'narrative' | 'complete') | null;
          score?: number | null;
          notes?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Indicates if character persona has been synced to PathRAG knowledge base.
   */
  pathragSynced?: boolean | null;
  /**
   * Timestamp of the last successful PathRAG sync.
   */
  pathragLastSync?: string | null;
  /**
   * Number of documents synced to PathRAG knowledge base.
   */
  pathragDocumentCount?: number | null;
  /**
   * Timestamp of the last consistency validation run.
   */
  lastConsistencyValidation?: string | null;
  /**
   * Summary statistics from the last consistency validation.
   */
  consistencyValidationSummary?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * A library of all generated and validated shots.
   */
  imageGallery?:
    | {
        imageFile: string | Media;
        /**
         * Check this for the initial 360-degree turnaround images.
         */
        isCoreReference?: boolean | null;
        /**
         * The unique key from the DINOv3 service (R2 object key).
         */
        dinoAssetId?: string | null;
        dinoProcessingStatus?: ('pending' | 'processing' | 'validation_failed' | 'validation_success') | null;
        qualityScore?: number | null;
        consistencyScore?: number | null;
        /**
         * Contains reasons for failure from the DINOv3 service.
         */
        validationNotes?: string | null;
        /**
         * e.g., front, 45_left, over-the-shoulder, close-up
         */
        shotType?: string | null;
        /**
         * Descriptive tags for this image (lighting, mood, pose, etc.)
         */
        tags?: string | null;
        /**
         * The prompt used to generate this image (if AI-generated).
         */
        generationPrompt?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'characters';
        value: string | Character;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  dinoAssetId?: T;
  dinoMediaUrl?: T;
  dinoProcessingStatus?: T;
  dinoFeatures?: T;
  qualityScore?: T;
  consistencyScore?: T;
  validationNotes?: T;
  dinoProcessedAt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "characters_select".
 */
export interface CharactersSelect<T extends boolean = true> {
  name?: T;
  status?: T;
  characterId?: T;
  biography?: T;
  personality?: T;
  motivations?: T;
  relationships?: T;
  backstory?: T;
  skills?:
    | T
    | {
        skill?: T;
        level?: T;
        description?: T;
        id?: T;
      };
  age?: T;
  height?: T;
  weight?: T;
  eyeColor?: T;
  hairColor?: T;
  physicalDescription?: T;
  voiceDescription?: T;
  clothing?: T;
  novelMovieIntegration?:
    | T
    | {
        projectId?: T;
        projectName?: T;
        lastSyncAt?: T;
        syncStatus?: T;
        conflictResolution?: T;
        changeLog?:
          | T
          | {
              timestamp?: T;
              source?: T;
              changes?:
                | T
                | {
                    field?: T;
                    id?: T;
                  };
              resolvedBy?: T;
              id?: T;
            };
      };
  enhancedRelationships?:
    | T
    | {
        characterId?: T;
        characterName?: T;
        relationshipType?: T;
        relationshipDynamic?: T;
        storyContext?: T;
        visualCues?:
          | T
          | {
              cue?: T;
              id?: T;
            };
        strength?: T;
        conflictLevel?: T;
        id?: T;
      };
  sceneContexts?:
    | T
    | {
        sceneId?: T;
        sceneType?: T;
        generatedImages?:
          | T
          | {
              imageId?: T;
              id?: T;
            };
        qualityScores?:
          | T
          | {
              score?: T;
              id?: T;
            };
        lastGenerated?: T;
        id?: T;
      };
  masterReferenceImage?: T;
  masterReferenceProcessed?: T;
  masterReferenceQuality?: T;
  coreSetGenerated?: T;
  coreSetGeneratedAt?: T;
  coreSetQuality?: T;
  enhancedQualityMetrics?:
    | T
    | {
        narrativeConsistency?: T;
        crossSceneConsistency?: T;
        relationshipVisualConsistency?: T;
        lastValidated?: T;
        validationHistory?:
          | T
          | {
              timestamp?: T;
              validationType?: T;
              score?: T;
              notes?: T;
              id?: T;
            };
      };
  pathragSynced?: T;
  pathragLastSync?: T;
  pathragDocumentCount?: T;
  lastConsistencyValidation?: T;
  consistencyValidationSummary?: T;
  imageGallery?:
    | T
    | {
        imageFile?: T;
        isCoreReference?: T;
        dinoAssetId?: T;
        dinoProcessingStatus?: T;
        qualityScore?: T;
        consistencyScore?: T;
        validationNotes?: T;
        shotType?: T;
        tags?: T;
        generationPrompt?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}